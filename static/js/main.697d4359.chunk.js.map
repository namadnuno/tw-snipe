{"version":3,"sources":["store/units.ts","AttackForm.tsx","store/snipe.ts","store/map.ts","App.tsx","reportWebVitals.js","index.js"],"names":["UnitsManager","units","this","name","speed","sort","a","b","AttackForm","Submited","initialValues","defender_coords","attack_datetime","defender_slowest_unit","nearest_babarian_village_coords","support_max_time","world","onSubmit","values","setSubmitting","setTimeout","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","setFieldValue","className","htmlFor","type","onChange","onBlur","value","placeholder","map","unit","onClick","src","alt","max","min","disabled","snipe","replace","distanceFromBarbarianVillage","x","y","split","el","parseInt","x1","x2","y1","y2","Math","abs","distanceBetween","console","log","supportTime","minutes","totalTimeBeforeAttack","parsedDateTime","dayjs","cacelSuportTime","floor","attack_barbarian_at","subtract","format","cancel_attack_at","cancel_suport_command_at","attack_at","attack_barbarian_village_url","commands_place_url","App","unitsManager","useState","submited","setSubmited","snipeData","setSnipeData","getSpeedOrdered","rel","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.697d4359.chunk.js","sourcesContent":["import { Unit } from './types';\n\nexport class UnitsManager {\n    private units: Array<Unit>;\n\n    constructor() {\n        this.units = [\n            {\n                name: 'spear',\n                speed: 18\n            },\n            {\n                name: 'sword',\n                speed: 22\n            },\n            {\n                name: 'axe',\n                speed: 18\n            },\n            {\n                name: 'archer',\n                speed: 18\n            },\n            {\n                name: 'spy',\n                speed: 9\n            },\n            {\n                name: 'light',\n                speed: 10\n            },\n            {\n                name: 'marcher',\n                speed: 10\n            },\n            {\n                name: 'heavy',\n                speed: 11\n            },\n            {\n                name: 'ram',\n                speed: 30\n            },\n            {\n                name: 'catapult',\n                speed: 30\n            },\n            {\n                name: 'knight',\n                speed: 10\n            },\n            {\n                name: 'snob',\n                speed: 35\n            },\n        ]\n    }\n\n    getUnits() {\n        return this.units\n    }\n\n    getSpeedOrdered() {\n        return this.units.sort((a, b) => a.speed - b.speed );\n    }\n}","import { Formik } from 'formik';\nimport { Unit } from './store/types';\n\ntype AttackFormProps = {\n  units: Array<Unit>,\n  Submited: CallableFunction\n}\n\nexport type AttactFormTypes = {\n  defender_coords: string; \n  attack_datetime: string; \n  defender_slowest_unit: Unit|null;\n  nearest_babarian_village_coords: string;\n  support_max_time: number;\n  world: string;\n}\n\nconst AttackForm = ({ units, Submited }: AttackFormProps) => {\n    const initialValues: AttactFormTypes = { \n      defender_coords: '', \n      attack_datetime: '', \n      defender_slowest_unit: null, \n      nearest_babarian_village_coords: '',  \n      support_max_time: 5,\n      world: ''\n    };\n\n    return (\n        <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            Submited(values)\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <div className=\"f-group\">\n              <label htmlFor=\"world\">World</label>\n              <input\n                type=\"text\"\n                name=\"world\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.world}\n                placeholder=\"pt77\"\n              />\n            </div>\n            <div className=\"f-group\">\n              <label htmlFor=\"defender_coords\">Defender Coordenates</label>\n              <input\n                type=\"text\"\n                name=\"defender_coords\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.defender_coords}\n                placeholder=\"453|347\"\n              />\n            </div>\n            <div className=\"f-group\">\n              <label htmlFor=\"nearest_babarian_village_coords\">Nearest Barbarian Village Coordenates</label>\n              <input\n                type=\"text\"\n                name=\"nearest_babarian_village_coords\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.nearest_babarian_village_coords}\n                placeholder=\"452|349\"\n              />\n            </div>\n            <div className=\"f-group\">\n              <label htmlFor=\"attack_datetime\">Attack datetime:</label>\n              <input\n                type=\"datetime\"\n                name=\"attack_datetime\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                placeholder={'2021-02-20 02:14:53'}\n                value={values.attack_datetime}\n              />\n            </div>\n            <div className=\"unit-list\">\n              <label htmlFor=\"slowest_unit\">Slowest Unit</label>\n              {\n                units.map((unit: Unit) => {\n                  return (\n                    <button type=\"button\" onClick={() => {\n                      setFieldValue('defender_slowest_unit', unit)\n                    }} className={values.defender_slowest_unit === unit ? 'is-selected' : ''}>\n                      <img src={'/units/Unit_' + unit.name + '.png'} alt={unit.name} />\n                    </button>\n                  )\n                })\n              }\n            </div>\n            <div className=\"f-group\">\n              <label htmlFor=\"support_max_time\">Support max time</label>\n              <input\n                type=\"number\"\n                max=\"10\"\n                min=\"2\"\n                name=\"support_max_time\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.support_max_time}\n              />\n            </div>\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n    )\n}\n\nexport default AttackForm;","import dayjs from \"dayjs\";\nimport { AttactFormTypes } from \"../AttackForm\";\nimport { distanceBetween } from './map'\n\nexport type SnipeDataType = {\n    attack_at: string;\n    attack_barbarian_at: string;\n    cancel_attack_at: string;\n    cancel_suport_command_at: string;\n    attack_barbarian_village_url: string;\n    commands_place_url: string;\n}\n\nconst getTimeFromMinutes = (minutes: number) => {\n    var timeHours = Math.floor(minutes / 60);          \n    var timeMinutes = minutes % 60;\n\n    return timeHours + \":\" + timeMinutes;\n}\n\nconst snipe = (values: AttactFormTypes): SnipeDataType => {\n    const nearest_babarian_village_coords = values.nearest_babarian_village_coords.replace('|', ';');\n    const distanceFromBarbarianVillage = distanceBetween(values.defender_coords, values.nearest_babarian_village_coords);\n\n    console.log(distanceFromBarbarianVillage);\n\n    let supportTime = 100;\n    if (values.defender_slowest_unit) {\n        supportTime = distanceFromBarbarianVillage * values.defender_slowest_unit.speed;\n    }\n\n    console.log(values.defender_slowest_unit, 'defender_slowest_unit', supportTime);\n\n    const totalTimeBeforeAttack = 2 * values.support_max_time;\n\n    const parsedDateTime = dayjs(values.attack_datetime);\n\n    const cacelSuportTime = getTimeFromMinutes(supportTime);\n\n    console.log(cacelSuportTime, 'cacelSuportTime');\n\n    return {\n        attack_barbarian_at: parsedDateTime.subtract(totalTimeBeforeAttack, 'minutes').format('YYYY-MM-DD HH:mm:ss'),\n        cancel_attack_at: parsedDateTime.subtract(values.support_max_time, 'minutes').format('YYYY-MM-DD HH:mm:ss'),\n        cancel_suport_command_at: cacelSuportTime,\n        attack_at: parsedDateTime.format('YYYY-MM-DD HH:mm:ss'),\n        attack_barbarian_village_url: 'https://' + values.world + '.tribalwars.com.pt/game.php?screen=map#' + nearest_babarian_village_coords,\n        commands_place_url: 'https://' + values.world + '.tribalwars.com.pt/game.php?screen=place'\n    };\n}\n\nexport default snipe;","export const distanceBetween = (x: string, y: string) => {\n    const [x1, x2] = x.split('|').map(el => parseInt(el, 10));\n    const [y1, y2] = y.split('|').map(el => parseInt(el, 10));\n\n    return Math.max(Math.abs(x1-y1), Math.abs(x2-y2));\n}","import './App.scss';\nimport { UnitsManager } from './store/units';\nimport AttackForm, { AttactFormTypes } from './AttackForm';\nimport snipe, { SnipeDataType } from './store/snipe';\nimport { useState } from 'react';\n\nconst App = () => {\n  const unitsManager = new UnitsManager();\n  const [submited, setSubmited] = useState(false)\n  const [snipeData, setSnipeData] = useState<SnipeDataType|null>(null)\n\n  const handleSubmit = (values: AttactFormTypes) => {\n    setSnipeData(snipe(values));\n    setSubmited(true);\n  }\n\n  const handleReset = () => {\n    setSubmited(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <img src=\"/logo.png\" className=\"App-logo\" alt=\"logo\" />\n        <p>\n          TW Sniper\n        </p>\n        {\n          !submited &&\n          <AttackForm units={unitsManager.getSpeedOrdered()} Submited={handleSubmit} />\n        }\n        {\n          submited && snipeData != null &&\n          <div className=\"result\">\n            <div className=\"line\">\n              <span className=\"label\">Attack:</span>\n              <span className=\"value\">{snipeData.attack_at}</span>\n            </div>\n            <div className=\"line\">\n              <span className=\"label\">Attack the barbarian village at:</span>\n              <a rel=\"noreferrer\" href={snipeData.attack_barbarian_village_url} target=\"_blank\" className=\"value\">{snipeData.attack_barbarian_at}</a>\n            </div>\n            <div className=\"line\">\n              <span className=\"label\">Cancel the barbarian village attack at:</span>\n              <a rel=\"noreferrer\" href={snipeData.commands_place_url} target=\"_blank\" className=\"value\">{snipeData.cancel_attack_at}, {snipeData.cancel_suport_command_at}</a>\n            </div>\n            <button onClick={handleReset} type=\"button\">Reset</button>\n          </div>\n        }\n        <div className=\"bg-left\"></div>\n        <div className=\"bg-right\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}